#include "Max7219LedMatrix.h"
// Bitmap definitions for ASCII characters
const uint8_t ASCII[][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // Space (32)
  { 0x00, 0x00, 0x5F, 0x5F, 0x00, 0x00, 0x00, 0x00 },  // ! (33)
  { 0x00, 0x07, 0x03, 0x00, 0x07, 0x03, 0x00, 0x00 },  // " (34)
  { 0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00 },  // # (35)
  { 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00 },  // $ (36)
  { 0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00 },  // % (37)
  { 0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00 },  // & (38)
  { 0x00, 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00 },  // ' (39)
  { 0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00 },  // ( (40)
  { 0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00 },  // ) (41)
  { 0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08 },  // * (42)
  { 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00 },  // + (43)
  { 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00 },  // , (44)
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 },  // - (45)
  { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00 },  // . (46)
  { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 },  // / (47)
  { 0x3E, 0x7F, 0x59, 0x4D, 0x7F, 0x3E, 0x00, 0x00 },  // 0 (48)
  { 0x42, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00 },  // 1 (49)
  { 0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00 },  // 2 (50)
  { 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 },  // 3 (51)
  { 0x18, 0x1C, 0x52, 0x7F, 0x7F, 0x50, 0x00, 0x00 },  // 4 (52)
  { 0x2F, 0x6F, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00 },  // 5 (53)
  { 0x3E, 0x7F, 0x49, 0x49, 0x79, 0x30, 0x00, 0x00 },  // 6 (54)
  { 0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00 },  // 7 (55)
  { 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 },  // 8 (56)
  { 0x06, 0x4F, 0x49, 0x49, 0x7F, 0x3E, 0x00, 0x00 },  // 9 (57)
  { 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00 },  // : (58)
  { 0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00 },  // ; (59)
  { 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00 },  // < (60)
  { 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00 },  // = (61)
  { 0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00 },  // > (62)
  { 0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00 },  // ? (63)
  { 0x3E, 0x7F, 0x41, 0x5D, 0x55, 0x1F, 0x1E, 0x00 },  // @ (64)
  { 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00 },  // A (65)
  { 0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 },  // B (66)
  { 0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00 },  // C (67)
  { 0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00 },  // D (68)
  { 0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00 },  // E (69)
  { 0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00 },  // F (70)
  { 0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00 },  // G (71)
  { 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00 },  // H (72)
  { 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00 },  // I (73)
  { 0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00 },  // J (74)
  { 0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00 },  // K (75)
  { 0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00 },  // L (76)
  { 0x7F, 0x7E, 0x0C, 0x18, 0x0C, 0x7E, 0x7F, 0x00 },  // M (77)
  { 0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00 },  // N (78)
  { 0x3E, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00, 0x00 },  // O (79)
  { 0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00 },  // P (80)
  { 0x1E, 0x3F, 0x21, 0x31, 0x7F, 0x5E, 0x00, 0x00 },  // Q (81)
  { 0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00 },  // R (82)
  { 0x26, 0x6F, 0x4D, 0x59, 0x7B, 0x32, 0x00, 0x00 },  // S (83)
  { 0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00 },  // T (84)
  { 0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00 },  // U (85)
  { 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00 },  // V (86)
  { 0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00 },  // W (87)
  { 0x63, 0x77, 0x1C, 0x08, 0x1C, 0x77, 0x63, 0x00 },  // X (88)
  { 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00 },  // Y (89)
  { 0x67, 0x73, 0x59, 0x4D, 0x47, 0x63, 0x71, 0x00 },  // Z (90)
  { 0x00, 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00 },  // [ (91)
  { 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 },  // \ (92)
  { 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 },  // ] (93)
  { 0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 },  // ^ (94)
  { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 },  // _ (95)
  { 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00 },  // ` (96)
  { 0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00 },  // a (97)
  { 0x41, 0x7F, 0x3F, 0x44, 0x44, 0x7C, 0x38, 0x00 },  // b (98)
  { 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00 },  // c (99)
  { 0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00 },  // d (100)
  { 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00 },  // e (101)
  { 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00 },  // f (102)
  { 0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00 },  // g (103)
  { 0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00 },  // h (104)
  { 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00 },  // i (105)
  { 0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00 },  // j (106)
  { 0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 },  // k (107)
  { 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00 },  // l (108)
  { 0x7C, 0x7C, 0x18, 0x30, 0x18, 0x7C, 0x78, 0x00 },  // m (109)
  { 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00 },  // n (110)
  { 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00 },  // o (111)
  { 0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00 },  // p (112)
  { 0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00 },  // q (113)
  { 0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00 },  // r (114)
  { 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00 },  // s (115)
  { 0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00 },  // t (116)
  { 0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00 },  // u (117)
  { 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00 },  // v (118)
  { 0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00 },  // w (119)
  { 0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00 },  // x (120)
  { 0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00 },  // y (121)
  { 0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00 },  // z (122)
  { 0x08, 0x08, 0x36, 0x77, 0x41, 0x41, 0x00, 0x00 },  // { (123)
  { 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00 },  // | (124)
  { 0x41, 0x41, 0x77, 0x36, 0x08, 0x08, 0x00, 0x00 },  // } (125)
  { 0x08, 0x0C, 0x06, 0x0C, 0x18, 0x0C, 0x08, 0x00 }   // ~ (126)
};
Max7219LedMatrix::Max7219LedMatrix(int clk_pin, int cs_pin, int din_pin) 
  : clk_pin(clk_pin), cs_pin(cs_pin), din_pin(din_pin) {
}
void Max7219LedMatrix::begin() {
  pinMode(clk_pin, OUTPUT);
  pinMode(cs_pin, OUTPUT);
  pinMode(din_pin, OUTPUT);
  digitalWrite(cs_pin, HIGH);
  digitalWrite(clk_pin, LOW);
  digitalWrite(din_pin, LOW);
    
  delay(50);
  // Initialize MAX7219 registers
  write(0x09, 0x00); // No decode mode
  write(0x0a, 0x00); // Medium brightness
  write(0x0b, 0x07); // Scan limit - all digits
  write(0x0c, 0x01); // Normal operation
  write(0x0f, 0x00); // Display test off
  clear();
}

void Max7219LedMatrix::writeByte(uint8_t data) {

  digitalWrite(cs_pin, LOW);
  for (int i = 8; i >= 1; i--) {
    //MAX7219 reads data when CLK goes from LOW to HIGH
    digitalWrite(clk_pin, LOW);
    digitalWrite(din_pin, data & 0x80);  //Sending leftmost bit, 0x80 is the mask
    data = data << 1;                    // shift to left
    digitalWrite(clk_pin, HIGH);
  }
}

void Max7219LedMatrix::write(uint8_t address, uint8_t value) {
    digitalWrite(cs_pin, LOW);
    writeByte(address);
    writeByte(value);
    digitalWrite(cs_pin, HIGH);
}

void Max7219LedMatrix::clear() {
    for (int i = 1; i <= 8; i++) {
        write(i, 0x00);
    }
}
void Max7219LedMatrix::setBrightness(uint8_t brightness) {
    write(0x0A, brightness);
}
void Max7219LedMatrix::printMessage(const char* str, unsigned int delay_ms) {
    if (str == nullptr) return;
    const char *p = str;
    int offset = 32; // ASCII space character
    
    while(*p != '\0') {
      uint8_t ascii_code = (uint8_t)(*p);
      uint8_t* char_data = ASCII[ascii_code - offset];
      for(int i = 1; i <= 7; i++) {
          write(i, char_data[i-1]);
      }
      delay(delay_ms);
      p++;
    }
    // Clear display after message
    clear();
}
